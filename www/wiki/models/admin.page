<?npl
--[[
Title: administrator
Author: wuxiangan
Date: 2016/10/21
]]

include_once("./user.page")
include_once("./website.page")
include_once("./user_log.page")
include_once("./bigfile.page")
include_once("./qiniu_files.page")
include_once("./util.page")
include_once("./validators.page")
include_once("./elasticsearch.page")

local admin = inherit(models.abstract.base, gettable("models.admin"))
admin.db_name = "admin"

local validators = models.validators:new()

-- 登录
function admin:api_login(params)
	if (not params.username) or (not params.password) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.password = ParaMisc.md5(params.password or "")

	local userDB = models.user:new()
	userDB:db():findOne({["+username+password"] = {params.username, params.password}}, resume)

	local _, userinfo = yield()

	if not userinfo then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	--if userinfo.username == "lizq123" then
		--userDB:db():updateOne({["+username"]={params.username}}, {roleId=const.USER_ROLE_MANAGER}, resume)
		--yield()
		--userinfo.roleId = const.USER_ROLE_ADMINISTRATOR
	--end

	if userinfo.roleId ~= const.USER_ROLE_MANAGER and userinfo.roleId ~= const.USER_ROLE_ADMINISTRATOR then
		return errors:wrap(errors:new("用户不是管理员"))
	end

	return errors:wrap(nil,{token=encodeJWT({userId=userinfo._id, username=userinfo.username, roleId=userinfo.roleId, isAdmin=true}), userinfo=userinfo})
end

-- 管理员认证
function admin:adminAuth()
	local token = getTokenInfo()
	if (not token) or (token.roleId ~= const.USER_ROLE_MANAGER and token.roleId ~= const.USER_ROLE_ADMINISTRATOR) then
		response:status(401):send({ message = "无权限访问"})
		exit()
	end

	return token
end

-- 获取用户列表
function admin:api_getUserList(params)
	self:adminAuth()

	local skip, limit = util:pagination(params)

	local userDB = models.user:new()
	userDB:db():count({}, resume)
	local _, total = yield()

	userDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	local _, userList = yield()

	return errors:wrap(nil, {total=total, userList = userList})
end

-- 获取管理员列表
function admin:api_getManagerList(params)
	self:adminAuth()

	local skip, limit = util:pagination(params)

	local userDB = models.user:new()
	userDB:db():count({["+roleId"] = {const.USER_ROLE_ADMINISTRATOR}}, resume)
	local _, total = yield()

	userDB:db():find({["+roleId"] = {const.USER_ROLE_ADMINISTRATOR}}, resume)
	local _, managerList = yield()

	return errors:wrap(nil, {total = total, managerList = managerList})
end

function admin:api_managerSearch(params)
	self:adminAuth()

	local _id = params._id or nil
	local username = params.username

	local userDB = models.user:new()
	--userDB:db():count({["+roleId+_id"] = {const.USER_ROLE_ADMINISTRATOR,1}}, resume)
	--local _, total = yield()
	local total = 0;

	if username ~= "" and _id == nil then
		userDB:db():find({["+roleId+username"] = {const.USER_ROLE_ADMINISTRATOR,username}}, resume)
	end
	if _id ~= "" and username == "" then
		userDB:db():find({["+roleId+_id"] = {const.USER_ROLE_ADMINISTRATOR,_id}}, resume)
	end
	if username ~= "" and _id ~= nil then
		userDB:db():find({["+roleId+_id+username"] = {const.USER_ROLE_ADMINISTRATOR,_id,username}}, resume)
	end

	--userDB:db():find({roleId = const.USER_ROLE_ADMINISTRATOR}, resume)
	--userDB:db():find({{roleId = const.USER_ROLE_ADMINISTRATOR},{_id={gt=-1, skip=skip, limit=limit}}}, resume)
	local _, searchManagerList = yield()

	return errors:wrap(nil, {total = total, searchManagerList = searchManagerList})
end

function admin:api_newManager(params)
	self:adminAuth()


end

-- 获取站点列表
function admin:api_getSiteList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)

	local websiteDB = models.website:new()
	websiteDB:db():count({}, resume)
	local _, total = yield()

	websiteDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	local _, siteList = yield()

	return errors:wrap(nil, {total=total, siteList = siteList})
end

function admin:api_test()
	return errors:wrap(nil, {total="total", siteList = "siteList"})
end

-- 获取域名列表
function admin:api_getDomainList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)
	local domainDB = models.website_domain:new()
	domainDB:db():count({}, resume)
	local _,total = yield()

	domainDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	local _, domainList = yield()

	return errors:wrap(nil, {total=total, domainList = domainList})
end

-- 获取vip列表
function admin:api_getVIPList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)
	local VIPDB = models.vip:new()
	VIPDB:db():count({}, resume)
	local _,total = yield()

	VIPDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	--VIPDB:db():find({}, resume)
	local _, VIPList = yield()

	return errors:wrap(nil, {total=total, VIPList = VIPList})
end

function admin:api_getUserLogList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)
	local userLogDB = models.user_log:new()

	--local createAt = ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss")
	--userLogDB:db():insertOne(nil, {createAt=createAt, userid=1, username="lizq", userip="0.0.0.0", operation="add", description="init", targetType="user_log", targetId=0}, resume)

	userLogDB:db():count({}, resume)
	local _,total = yield()

	userLogDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	local _, userLogList = yield()

	return errors:wrap(nil, {total=total, userLogList = userLogList})
end

function admin:api_insertUserLog(params)
	local createAt = ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss")
	local userip = getpeername() or "0.0.0.0"
	if params.username ~= nil and params.operation ~= nil and params.description ~= nil then
		local userLogDB = models.user_log:new()
		userLogDB:db():insertOne(nil, {createAt=createAt, username=params.username, userip=userip, operation=params.operation, description=params.description, targetType=params.targetType, targetId=params.targetId}, resume)
		local _, insertedLog = yield()
		return errors:wrap(nil, {insertedLog = insertedLog})
	else
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

end


function admin:api_getFileList(params)
	self:adminAuth()
	local file_list = {}
	local skip, limit = util:pagination(params)
	local qiniu_filesDB = models.qiniu_files:new()

	local checked = tonumber(params.checked)
	qiniu_filesDB:db():count({checked=checked}, resume)
	local _, total = yield()

	if total > 0 then
		skip, limit = util:get_reversed_pagination(total, skip, limit)
		if checked then
			qiniu_filesDB:db():find({{"checked",checked}, {_id,{gt=0, offset=skip, limit=limit}}}, resume)
		else
			qiniu_filesDB:db():find({_id={gt=0, offset=skip, limit=limit}}, resume)
		end
		err, file_list = yield()
		reverse_file_list = util:reverse_array(file_list)
	end

	return errors:wrap(err, {total=total, file_list=reverse_file_list})
end


function admin:api_checkFile(params)
	self:adminAuth()
	local qiniu_filesDB = models.qiniu_files:new()
	qiniu_filesDB:db():updateOne({_id=params._id}, {checked=params.checked}, resume)
	local err, file = yield()

	if not err then
		local bigfileDB = models.bigfile:new()
		bigfileDB:db():updateOne({file_id=params._id}, {checked=params.checked}, resume)
		err, file = yield()
	end

	return errors:wrap(err, {checked=file.checked})
end


function admin:api_updateFilesStatus(params)
	local err_message = util:check_script_password(params)
	if not params.checked then err_message = "checked code required" end
	if err_message then errors:raise(400, err_message) end

	local qiniu_filesDB = models.qiniu_files:new()
	qiniu_filesDB:db():find({_id={gt=-1, limit=99999999}}, resume)
	local err, qiniu_files = yield()
	for i, qiniu_file in ipairs(qiniu_files) do
		qiniu_filesDB:db():updateOne({_id=qiniu_file._id},{checked=tonumber(params.checked)}, resume)
		local err, result = yield()
		if err then log({err=err, from="admin:api_updateFilesStatus"}) end
	end

	local bigfileDB = models.bigfile:new()
	bigfileDB:db():find({_id={gt=-1, limit=99999999}}, resume)
	local err, bigfiles = yield()
	for i, bigfile in ipairs(bigfiles) do
		bigfileDB:db():updateOne({_id=bigfile._id},{checked=tonumber(params.checked)}, resume)
		local err, result = yield()
		if err then log({err=err, from="admin:api_updateFilesStatus"}) end
	end

	return errors:wrap()
end


function admin:api_deleteFile(params)
	self:adminAuth()
	local bigfileDB = models.bigfile:new()
	bigfileDB:db():findOne({file_id=tonumber(params._id)}, resume)
	local err, big_file = yield()

	if not big_file then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	return bigfileDB:api_deleteById(big_file)
end


function admin:api_lockUser(params)
	self:adminAuth()
	local validate_tasks = {
		required_fields = {"locked_deadline", "username"}
	}
	validators:add_validate_tasks(validate_tasks, params)
	local err, message = validators:get_validate_result()
	if err then errors:raise(400, message) end

	local userDB = models.user:new()
	userDB:db():findOne({["+username"]={params.username}}, resume)
	local err, user = yield()
	if not user then errors:raise(404, "user not found") end

	userDB:db():updateOne(
		{["+username"] = {params.username}},
		{locked_deadline = params.locked_deadline},
		resume
	)
	local err, result = yield()

	return errors:wrap(nil, {
		locked = true,
		username = result.username,
		locked_deadline = result.locked_deadline,
	})
end


function admin:api_unLockUser(params)
	self:adminAuth()
	if not params.username then errors:raise(400, "username is required") end

	local userDB = models.user:new()
	userDB:db():findOne({["+username"]={params.username}}, resume)
	local err, user = yield()
	if not user then errors:raise(404, "user not found") end

	local locked_deadline = "0000-01-01 00:00:00"
	userDB:db():updateOne(
		{["+username"] = {params.username}},
		{locked_deadline = locked_deadline},
		resume
	)
	local err, result = yield()

	return errors:wrap(nil, {
		locked = false,
		username = result.username,
		locked_deadline = result.locked_deadline,
	})
end


function admin:api_searchUsername(params)
	if not params.q then
		errors:raise(400, "q required")
	end
	local usernames = {}
	local es = models.elasticsearch:new()
	local index = CURRENT_ENV .. "_kw_users"
	es:connect({index=index})
	local body = { 
		suggest = {
			username_sug = {
				prefix = params.q,
				completion = {
					field = "suggestion",
					size = 100,
					fuzzy = {
						fuzziness = 2
					}
				}
			}
		},

	}
	local code, search_result = es:search({body=body, type="users"})
	for i, user in ipairs(search_result.data.suggest.username_sug[1].options) do
		usernames[#usernames + 1] = user._source.username
	end
	return errors:wrap(code, usernames)
end


function admin:api_addUserSug(params)
	local errMsg = util:check_script_password(params)
	if errMsg then errors:raise(400, errMsg) end

	local es = models.elasticsearch:new()
	local index = CURRENT_ENV .. "_kw_users"
	es:connect({index=index})
	local userDB = models.user:new()
	userDB:db():find({_id={gt=-1, limit=9999999}}, resume)
	local err, users = yield()
	local bulk_data = ""

	for i, user in ipairs(users) do
		bulk_data = bulk_data .. commonlib.Json.Encode({update = {_id = user._id}}, true) .. "\n"
		bulk_data = bulk_data .. commonlib.Json.Encode({doc = {suggestion = user.username}}, true) .. "\n"
		if (i%200 == 0) or (i == #users) then
			es:bulk({data=bulk_data, type="users"})
			bulk_data = ""
		end
	end
	return errors:wrap()
end


-- 获取操作日志列表
--[[
function admin:api_getVIPList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)
	local VIPDB = models.vip:new()
	VIPDB:db():count({}, resume)
	local _,total = yield()

	VIPDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	--VIPDB:db():find({}, resume)
	local _, VIPList = yield()

	return errors:wrap(nil, {total=total, VIPList = VIPList})
end

]]




















