<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/11/01
]]
include_once("./abstract/base.page")
include_once("./user.page")
include_once("./user_trends.page")

local user_fans = inherit(models.abstract.base, gettable("models.user_fans"))

user_fans.db_name = "user_fans";

function user_fans:ctor() 
	self:addfield("userId", "number", false)
	self:addfield("fansUserId", "number", false) -- fans userId 
end

function user_fans:api_upsert(params)
	if (not params.userId) or (not params.fansUserId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():insertOne({["+userId+fansUserId"]={params.userId, params.fansUserId}}, params, resume)
	
	return errors:wrap(yield())
end

-- 是否已经关注
function user_fans:api_isAttented(params)
	if (not params.userId) or (not params.fansUserId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+userId+fansUserId"]={params.userId, params.fansUserId}}, resume)
	local _, data = yield()
	
	if not data then
		return errors:wrap(nil, 0)
	end

	return errors:wrap(nil, 1)
end

-- 关注用户
function user_fans:api_attent(params)
	ensureAuthenticated()
	local userDB = models.user:new()
	
	if (params.username) then
		userDB:db():findOne({["+username"]={params.username}}, resume)
		local err, user = yield()
		if (user) then params.userId = user._id end
	end

	if (params.fansUsername) then
		userDB:db():findOne({["+username"]={params.fansUsername}}, resume)
		local err, fansUser = yield()
		if (fansUser) then params.fansUserId = fansUser._id end
	end

	if (not params.userId) or (not params.fansUserId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)		
	end

	self:api_upsert(params)	

	local userDB = models.user:new()
	local userinfo = userDB:api_getById({userId=params.userId}).data
	local fansUserInfo = userDB:api_getById({userId=params.fansUserId}).data
	if not userinfo or (not fansUserInfo) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	-- 创建用户动态
	local userTrendsDB = models.user_trends:new()
	local trend = {userId=params.userId, objectId=params.fansUserId, trendsType=const.USER_TRENDS_TYPE_ATTENT_USER}
	trend.desc = fansUserInfo.username .. "关注" .. userinfo.username
	userTrendsDB:api_upsert(trend)

	return errors:wrap()
end

-- 取消关注
function user_fans:api_unattent(params)
	ensureAuthenticated()
	local userDB = models.user:new()
	
	if (params.username) then
		userDB:db():findOne({["+username"]={params.username}}, resume)
		local err, user = yield()
		if (user) then params.userId = user._id end
	end

	if (params.fansUsername) then
		userDB:db():findOne({["+username"]={params.fansUsername}}, resume)
		local err, fansUser = yield()
		if (fansUser) then params.fansUserId = fansUser._id end
	end

	if (not params.userId) or (not params.fansUserId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():deleteOne({["+userId+fansUserId"]={params.userId, params.fansUserId}}, resume)
	yield()
	
	local userDB = models.user:new()
	local userinfo = userDB:api_getById({userId=params.userId}).data
	local fansUserInfo = userDB:api_getById({userId=params.fansUserId}).data
	if not userinfo or (not fansUserInfo) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	-- 创建用户动态
	local userTrendsDB = models.user_trends:new()
	local trend = {userId=params.userId, objectId=params.fansUserId, trendsType=const.USER_TRENDS_TYPE_ATTENT_USER}
	trend.desc = fansUserInfo.username .. "取消关注" .. userinfo.username
	userTrendsDB:api_upsert(trend)

	return errors:wrap()
end

-- 获取用户的粉丝数
function user_fans:api_getCountByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():count({["+userId"]={params.userId}}, resume)
	
	return errors:wrap(yield())
end

-- 获得用户的粉丝
function user_fans:api_getByUserId(params) 
	if not params.userId then 
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}
	end

	local skip, limit = util:pagination(params)	

	self:db():count({["+userId"]={params.userId}}, resume)
	local _, total = yield()

	self:db():find({["+userId"]={params.userId, skip=skip, limit=limit}}, resume)
	local _, data = yield()

	local userDB = models.user:new()
	for _, value in ipairs(data or {}) do
		value['userinfo'] = userDB:api_getById({userId=value.fansUserId}).data
	end

	return errors:wrap(nil,{total=total, userList=data})
end

-- 获得用户关注
function user_fans:api_getByFansUserId(params)
	if not params.fansUserId then 
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}
	end

	local skip, limit = util:pagination(params)	

	self:db():count({["+fansUserId"]={params.fansUserId}}, resume)
	local _, total = yield()

	self:db():find({["+fansUserId"]={params.fansUserId, skip=skip, limit=limit}}, resume)
	local _, data = yield()

	local userDB = models.user:new()
	for _, value in ipairs(data or {}) do
		value['userinfo'] = userDB:api_getById({userId=value.userId}).data
	end

	return errors:wrap(nil,{total=total, userList=data})
end
