<?npl
--[[
Title: validators
Author: ZhengJiabiao
Date: 2018/1
Desc: validators to validate parameters
]]


---------------------------------------------------------------
-- usages:
-- local required_fields = {"title", "username"}
-- local fields_length = {desc=30,username=30, field_name=limit_length}
-- local are_they_sensitive_fields = {"username"}
-- local fields_ranges = {age={gte=18, lte=60}}
-- local validators = models.validators:new()
-- local validate_tasks = {
--     {
--         validator = validators.required_fields_validator,
--         condition = required_fields
--     },
--     {
--         validator = validators.fields_length_validator,
--         condition = fields_length
--     },
--     {
--         validator = validators.users_existence_validator,
--         condition = models.user:new()
--     },
--     {
--         validator = validators.sensitive_words_validator,
--         condition = are_they_sensitive_fields
--     },
--     {
--         validator = validators.number_range_validator,
--         condition = fields_ranges
--     }
-- }
-- validators:add_validate_tasks(validate_tasks, params)
-- local params_error, error_msg = validators:get_validate_result()
---------------------------------------------------------------

local validators = inherit(nil, gettable("models.validators"))


function validators.required_fields_validator(params, required_fields)
    if (not params) or (not required_fields) then
        error("required_fields_validator errors : params to be validated and required_fields required!")
    end
    local params_error = false
    local message

    for i, field_name in ipairs(required_fields) do
        if (not params[field_name]) then
            params_error = true
            message = format('%s is required', field_name) 
            break
        end
    end

    return params_error, message
end


function validators.fields_length_validator(params, fields_length)
    if (not params) or (not fields_length) then
        error("fields_length_validator errors : params to be validated and fields_length required!")
    end
    local params_error = false
    local message
    local length = 0

    for field_name, limit in pairs(fields_length) do
        if (type(params[field_name]) == "string") or ((type(params[field_name]) == "table")) then
            length = #(params[field_name])
        elseif (type(params[field_name]) == "number") then
            length = #tostring(params[field_name])
        end

        if (length > limit) then
            params_error = true
            message = format('%s is too long', field_name) 
            break
        end
    end

    return params_error, message
end


function validators.number_range_validator(params, fields_range)
    if (not params) or (not fields_range) then
        error("number_range_validator errors : params to be validated and fields_range required!")
    end
    local params_error = false
    local message

    for field_name, range in pairs(fields_range) do
        params[field_name] = tonumber(params[field_name])
        if (not params[field_name]) then
            params_error = true
            message = format("%s must be a number", field_name)
            break
        end
        if (range.gt) then
            if (not (params[field_name] > range.gt)) then
                params_error = true
                message = format("%s must be greater than %d", field_name, range.gt)
                break
            end
        end
        if (range.lt) then
            if (not (params[field_name] < range.lt)) then
                params_error = true
                message = format("%s must be less than %d", field_name, range.lt)
                break
            end
        end
        if (range.gte) then
            if (not (params[field_name] >= range.gte)) then
                params_error = true
                message = format("%s must be greater than or equal to %d", field_name, range.gte)
                break
            end
        end
        if (range.lte) then
            if (not (params[field_name] <= range.lte)) then
                params_error = true
                message = format("%s must be less than or equal to %d", field_name, range.lte)
                break
            end
        end
    end
    return params_error, message
end


function validators.sensitive_words_validator(params, sensitive_fields)
    if (not params) or (not sensitive_fields) then
        error("sensitive_words_validator errors : params to be validated and sensitive_fields required!")
    end
    local params_error = false
    local message

    local params_to_check = {}
    for i, field_name in ipairs(sensitive_fields) do
        params_to_check[field_name] = params[field_name]
    end

    local not_sensitive = sensitiveWordFilter(params_to_check)
    if (not not_sensitive) then
        params_error = true
        message = "sensitive words included"
    end
    return params_error, message
end


-- errors if user does not exist
function validators.users_existence_validator(params, user_model)
    if (not user_model) then
        error("users_existence_validator errors : user_model required")
    end
    local params_error = false
    local message
    if (not params.username) then
        params_error = true
        message = "username is required!"
        return params_error, message
    end
    user_model:db():findOne({["+username"]={params.username}}, resume)
    local _, exist_user = yield()
    if (not exist_user) then
        params_error = true
        message = "user not exist"
    end
    return params_error, message
end


-- return errors message while object exists and mode == 1 (default)
-- return errors message while object not exist and mode == 0
function validators.existence_validator(params, fields_and_model)
    local params_error = false
    local mode = fields_and_model.mode or 1
    local message
    local unique_index = ""
    local index_fields = {}
    local model_instance = fields_and_model.model_instance
    for i, field_name in ipairs(fields_and_model.index_fields) do
        unique_index = unique_index .. "+" .. field_name
        index_fields[(#index_fields) + 1] = params[field_name]
    end
    model_instance:db():findOne({[unique_index] = index_fields}, resume)
    local err, result = yield()
    if (result) and (mode == 1) then
        params_error = true
        message = model_instance.db_name .. " exist"
    elseif (not result) and (mode == 0) then
        params_error = true
        message = model_instance.db_name .. " not exist"
    end
    return params_error, message
end


function validators.ensure_not_empty(params, fields_not_empty)
    local params_error = false
    local message
    for i, field_name in ipairs(fields_not_empty) do
        if (params[field_name] == "") then
            params_error = true
            message = field_name .. " cannot be empty"
            break
        end
    end
    return params_error, message
end


function validators:add_validate_tasks(validate_tasks, params)
    if (#validate_tasks == 0) then
        for condition_name, condition in pairs(validate_tasks) do
            local validator = validators.condition_to_validator[condition_name]
            if not validator then error(format("%s does not match any valdiator", condition_name)) end
            self:add_one_validate_task(validator, params, condition)
        end
    else
        for i, task in ipairs(validate_tasks) do
            self:add_one_validate_task(task.validator, params, task.condition)
        end
    end
end


function validators:add_one_validate_task(validator, params, condition)
    self.validators_to_run = self.validators_to_run or {}
    self.validators_to_run[(#self.validators_to_run) + 1] = {
        validator = validator,
        params = params,
        condition = condition
    }
end


function validators:get_validate_result()
    local params_error = false
    local message
    for i, v in ipairs(self.validators_to_run) do
        params_error, message = v.validator(v.params, v.condition)
        if (params_error) then break end
    end
    self.validators_to_run = {}
    return params_error, message
end


validators.condition_to_validator = {
    required_fields = validators.required_fields_validator,
    fields_length = validators.fields_length_validator,
    fields_range = validators.number_range_validator,
    sensitive_fields = validators.sensitive_words_validator,
    fields_and_model = validators.existence_validator,
    user_model = validators.users_existence_validator,
    fields_not_empty = validators.ensure_not_empty,
}