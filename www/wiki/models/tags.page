<?npl
--[[
Title: tags of pages
Author: ZhengJiabiao
Date: 2018/1
Desc: tags in pages,only to be used in backend data analysis
]]


include_once("./abstract/base.page")
include_once("./elasticsearch.page")
include_once("./validators.page")

local tags = inherit(models.abstract.base, gettable("models.tags"))
tags.db_name = "tags"

local es = models.elasticsearch:new()
local index = CURRENT_ENV .. "_kw_tags"
es:connect({index=index})


function tags:ctor()
    self:addfield("title", "string", false, 30)
    self:addfield("creator", "string", false, 30)
    self:addfield("createDate", "string", false, 64)
end


-- to insert an tags array
function tags:insert(params)
    if (not params.tags) or (not params.url) then
        return errors:wrap(REQUEST_PARAMS_ERROR)
    end

    local splited_url = commonlib.split(params.url, "/")
    local username = splited_url[1]
    local tags_to_insert = {}
    local finished_count = 0
    local tag, is_params_error, _
    local clean_tags = {}
    local unique_tags = {}
    local count_to_insert = 0
    local count_inserted = 0

    -- validate tags
    for i, tag_title in ipairs(params.tags) do
        tag, is_params_error, _ = self:insert_validator({title = tag_title, username = username})

        -- ensure tags are unique in clean_tags
        if (not is_params_error) and (not unique_tags[tag.title]) then 
            clean_tags[(#clean_tags) + 1 ] = tag
        end
        unique_tags[tag.title] = true
    end

    -- check existence of tags and insert tags not exist
    for i, tag in ipairs(clean_tags) do
        self:db():findOne({["+title"] = {tag.title}},
            function(err, data)
                finished_count = finished_count + 1
                if (not data) then
                    count_to_insert = count_to_insert + 1
                    self:db():insertOne({["+title"] = {tag.title}}, tag,
                        function(err, data)
                            tag.id = data._id
                            count_inserted = count_inserted + 1
                            if (finished_count == #clean_tags) and (count_inserted == count_to_insert) then 
                                resume()
                            end
                        end
                    )
                end
                if (finished_count == #clean_tags) then
                    if (count_to_insert > 0) then yield() end
                    resume()
                end
            end
        )
        if (i == #clean_tags) then
            yield()
            finished_count = 0
        end
    end
    self:insert_many_to_es(clean_tags)
    return errors:wrap(nil)
end


function tags:insertOne(params)
    ensureAuthenticated()
    local tag, is_params_error, message = self:insert_validator(params)
    if (is_params_error) then
        return response:status(400):send({error={message=message,status=400}})
    end
    self:db():findOne({["+title"] = {tag.title}}, resume)
    local err, result = yield()
    if (not result) then
        self:db():insertOne({["+title"] = {tag.title}}, tag, resume)
        err, result = yield()
        -- if (result) then
        --     self:insert_to_es(result)
        -- end
    end
    return errors:wrap(err, result)
end


function tags:insert_validator(params)
    local clean_data
    local required_fields = {"title", "username"}
    local fields_length = {title=30, username=30}
    local validators = models.validators:new()
    local validate_tasks = {
        {
            validator = validators.required_fields_validator,
            condition = required_fields
        }, {
            validator = validators.fields_length_validator,
            condition = fields_length
        }
    }
    validators:add_validate_tasks(validate_tasks, params)
    local is_params_error, message = validators:get_validate_result()

    if (not is_params_error) then
        clean_data = {
            title = params.title,
            creator = params.username,
            createDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
        }
    end
    return clean_data, is_params_error, message
end


function tags:getByName(params)
    if (not params.title) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end
    self:db():findOne({["+title"]={params.title}}, resume)
    return errors:wrap(yield())
end


function tags:getById(params)
    if (not params._id) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end
    self:db():findOne({_id=params._id}, resume)
    return errors:wrap(yield())
end


function tags:delete(params)
    ensureAuthenticated()
    if (not params.title) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end
    self:db():findOne({["+title"]={params.title}}, resume)
    local err, result = yield()
    if (result) then
        self:db():deleteOne({_id=params._id}, resume)
        err, result = yield()
        -- if (result) then
        --     self:delete_in_es(params)
        -- end
    end
    return errors:wrap(err, result)
end


-- insert tags into elasticsearch
function tags:insert_many_to_es(tags)
    local data = ""
    for i, tag in ipairs(tags) do
        if (tag.id) then
            data = data .. format('{"index":{"_id":%s}}', tag.id) .. "\n"
            tag.id = nil
            tag.create_date = tag.createDate
            tag.createDate = nil
            data = data .. commonlib.Json.Encode(tag, true) .. "\n"
        end
    end

    log(es:bulk({data = data, type = "tags"}))
end


-- insert a tag into elasticsearch
function tags:insert_to_es(params)
    local tag = {
        type = "tags",
        id = params._id,
        title = params.title,
        creator = params.creator,
        create_date = params.createDate
    }
    return es:insertOne(tag)
end


-- delete tags in elasticsearch
function tags:delete_in_es(params)
    local tag = {
        type = "tags",
        id = params._id
    }
    return es:deleteOne(params)
end
